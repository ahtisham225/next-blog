// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id      String     @id @default(cuid()) @map("_id")
  slug    String     @unique
  title   String
  img     String?
  posts   Post[]     // Assuming Post model is defined elsewhere
  lawyers CatLawyer[]
}

model Lawyer {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  img       String
  location  String
  cityId    String
  city      City @relation(fields: [cityId], references: [id])
  phone     String
  email     String
  site      String
  desc      String
  rating    Float
  categories CatLawyer[]

}

model Post {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  slug      String    @unique
  title     String
  desc      String
  img       String?
  views     Int       @default(0)
  catSlug   String
  cat       Category  @relation(fields: [catSlug], references: [slug])
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  desc      String
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}


model Country {
  id      String   @id @default(cuid()) @map("_id")
  name    String
  cities  City[]
}

model City {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  countryId String
  lawyers  Lawyer[]
  country   Country @relation(fields: [countryId], references: [id])
}

model CatLawyer {
  id        String   @default(cuid()) @map("_id")
  catId     String
  lawyerId  String
  lawyer    Lawyer   @relation(fields: [lawyerId], references: [id])
  category  Category @relation(fields: [catId], references: [id])
  @@id([id])
}